name: CI Pipeline

on:
    push:
        branches:
            - main
            - dev
    release:
        types: [published]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Prepare for key generation
              run: |
                chmod +x scripts/*
                bash scripts/prep.sh

            - name: Test key generation
              run: bash scripts/testing_prep.sh ${{ secrets.SUPABASE_JWT_SECRET }} ${{ secrets.SUPABASE_URL }} ${{ secrets.SUPABASE_KEY }} .

            - name: Build and run containers
              run: docker compose -f docker-compose.test.yml up -d

            - name: Initialize database
              run: bash scripts/wait_and_initialize_db.sh

            - name: Run tests
              run: docker exec $(docker ps -qf "name=gateway") pytest

            - name: Stop containers
              run: docker compose -f docker-compose.test.yml down
            
            - name: Debug event
              run: |
                echo "Event name: ${{ github.event_name }}"
                echo "Event action: ${{ github.event.action }}"

    build-and-push:
        needs: test
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          - name: GitHub Container Registry Login
            run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          - name: Username to Lowercase
            run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          - name: Set commit tag
            run: echo "IMAGE_TAG=$GITHUB_REF_NAME" >> $GITHUB_ENV

          - name: Debug commit tag
            run: 'echo "Commit tag is: ${{ env.IMAGE_TAG }}"'

          - name: Build FragmentServer Image
            run: docker build -t ghcr.io/${{ env.REPO_OWNER }}/fragmentserver:${{ env.IMAGE_TAG }} -f ./src/api/Dockerfile ./src/api

          - name: Push FragmentServer Image
            run: docker push ghcr.io/${{ env.REPO_OWNER }}/fragmentserver:${{ env.IMAGE_TAG }}